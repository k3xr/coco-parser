//// Gramática del fichero de gramática
//// Conjunto de símbolos terminales
Terminales = { ;  \r   document.write  (  )  string  prompt  ident  [  ]  var  new  Array  =  {  }  ,  !  <  +  ++  function  return  if  while  integer }

//// Conjunto de símbolo no terminales
NoTerminales = { PROGRAMA JAVASCRIPT  FINLINEA SENTENCIA  WRITE  WRITEAUX  PROMPT  PROMPTAUX  LLAMADAYASIGNACION  LLAMADAYASIGNACIONAUX DECLARACION DECLARACIONAUX ASIGNACION  ASIGNACIONAUX ASIGNACIONAUXDOS  ASIGNACIONAUXTRES  EXPRESIONBOOL  EXPRESIONBOOLAUX  EXPRESION  EXPRESIONAUX  NUMEROoIDENT  NUMEROoIDENTAUX  NUMEROoIDENTAUXDOS  NUMEROoIDENTAUXTRES   EXPPARENTESIS  FUNCION  ARGUMENTOS ARGUMENTOSAUX  ARGUMENTOSAUXDOS  CUERPO   RETURN   RETURNAUX  IFFUNCION  IFFUNCIONAUX  IFFUNCIONAUXDOS  IFFPPAL  WHILEFUNCION  WHILEFPPAL  WHILEFPPALAUX  LLAMADAFUNCION  LLAMADAFUNCIONAUX  LLAMADAFUNCIONAUXDOS }

//// Axioma
Axioma = PROGRAMA

//// Lista de producciones
Producciones = {

PROGRAMA -> JAVASCRIPT

JAVASCRIPT -> SENTENCIA JAVASCRIPT
JAVASCRIPT -> FUNCION JAVASCRIPT
JAVASCRIPT -> FINLINEA JAVASCRIPT
JAVASCRIPT -> IFFPPAL JAVASCRIPT
JAVASCRIPT -> WHILEFPPAL JAVASCRIPT
JAVASCRIPT -> lambda

FINLINEA -> ;
FINLINEA -> \r

SENTENCIA -> WRITE FINLINEA
SENTENCIA -> PROMPT FINLINEA
SENTENCIA -> DECLARACION FINLINEA
SENTENCIA -> LLAMADAYASIGNACION FINLINEA

WRITE -> document.write ( WRITEAUX ) 

WRITEAUX -> EXPRESIONBOOL
WRITEAUX -> string

PROMPT -> prompt ( ident PROMPTAUX )

PROMPTAUX -> lambda
PROMPTAUX -> [ EXPRESION ]

LLAMADAYASIGNACION -> ident LLAMADAYASIGNACIONAUX

LLAMADAYASIGNACIONAUX -> ASIGNACION
LLAMADAYASIGNACIONAUX -> LLAMADAFUNCION

DECLARACION -> var ident DECLARACIONAUX

DECLARACIONAUX -> lambda
DECLARACIONAUX -> = new Array ( EXPRESION )

ASIGNACION -> = ASIGNACIONAUX

ASIGNACIONAUX -> [ EXPRESION ] = EXPRESIONBOOL
ASIGNACIONAUX -> = ASIGNACIONAUXDOS

ASIGNACIONAUXDOS -> EXPRESIONBOOL
ASIGNACIONAUXDOS -> string
ASIGNACIONAUXDOS -> { EXPRESION ASIGNACIONAUXTRES }

ASIGNACIONAUXTRES -> , EXPRESION ASIGNACIONAUXTRES 
ASIGNACIONAUXTRES -> lambda

EXPRESIONBOOL -> ! EXPRESION < EXPRESION
EXPRESIONBOOL -> EXPRESION EXPRESIONBOOLAUX

EXPRESIONBOOLAUX -> < EXPRESION EXPRESIONBOOLAUX
EXPRESIONBOOLAUX -> lambda

EXPRESION -> NUMEROoIDENT EXPRESIONAUX 
EXPRESION -> ( EXPPARENTESIS

EXPRESIONAUX -> + EXPRESION
EXPRESIONAUX -> lambda

NUMEROoIDENT -> NUMEROoIDENTAUX  integer
NUMEROoIDENT -> ident NUMEROoIDENTAUXDOS

NUMEROoIDENTAUX -> ++
NUMEROoIDENTAUX -> lambda
    	 
NUMEROoIDENTAUXDOS -> NUMEROoIDENTAUXTRES 
NUMEROoIDENTAUXDOS -> lambda

NUMEROoIDENTAUXTRES -> [ EXPRESION ]
NUMEROoIDENTAUXTRES -> LLAMADAFUNCION

EXPPARENTESIS -> EXPRESION )

FUNCION -> function ident ARGUMENTOS { CUERPO }

ARGUMENTOS -> ( ARGUMENTOSAUX )

ARGUMENTOSAUX -> lambda
ARGUMENTOSAUX -> ident ARGUMENTOSAUXDOS

ARGUMENTOSAUXDOS -> lambda
ARGUMENTOSAUXDOS -> , ident ARGUMENTOSAUXDOS

CUERPO -> SENTENCIA CUERPO
CUERPO -> RETURN CUERPO
CUERPO -> FINLINEA CUERPO
CUERPO -> IFFUNCION CUERPO
CUERPO -> WHILEFUNCION CUERPO
CUERPO -> lambda

RETURN -> return RETURNAUX

RETURNAUX -> FINLINEA
RETURNAUX -> EXPRESIONBOOL FINLINEA

IFFUNCION -> if ( EXPRESIONBOOL ) IFFUNCIONAUX IFFUNCIONAUXDOS

IFFUNCIONAUX -> FINLINEA IFFUNCIONAUX
IFFUNCIONAUX -> lambda

IFFUNCIONAUXDOS -> LLAMADAYASIGNACION 
IFFUNCIONAUXDOS -> RETURN 

IFFPPAL -> if ( EXPRESIONBOOL ) LLAMADAYASIGNACION

WHILEFUNCION -> while ( EXPRESIONBOOL ) { CUERPO } FINLINEA

WHILEFPPAL -> while ( EXPRESIONBOOL ) { WHILEFPPALAUX } FINLINEA

WHILEFPPALAUX -> SENTENCIA WHILEFPPALAUX
WHILEFPPALAUX -> FINLINEA WHILEFPPALAUX
WHILEFPPALAUX -> lambda

LLAMADAFUNCION -> ( LLAMADAFUNCIONAUX )

LLAMADAFUNCIONAUX -> lambda
LLAMADAFUNCIONAUX -> EXPRESIONBOOL LLAMADAFUNCIONAUXDOS

LLAMADAFUNCIONAUXDOS -> lambda
LLAMADAFUNCIONAUXDOS -> , EXPRESIONBOOL LLAMADAFUNCIONAUXDOS 

}